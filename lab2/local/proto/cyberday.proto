// proto/cyberday.proto
syntax = "proto3";

option go_package = "./;cyberday";

package cyberday;

// -------------------------------------------------------------------------
// --- 1. Data Messages ---
// -------------------------------------------------------------------------

message Offer {
  string oferta_id = 1;
  string tienda = 2;
  string categoria = 3;
  string producto = 4;
  int64  precio = 5;
  int32  stock = 6;
  string fecha = 7;
  float  descuento = 8;
}

// -------------------------------------------------------------------------
// --- 2. Phase 1: Registration Messages ---
// -------------------------------------------------------------------------

message RegistrationRequest {
  string entity_id = 1;
  string entity_type = 2;
  string address = 3;
}

message RegistrationResponse {
  bool   success = 1;
  string message = 2;
}

message ConfirmRequest {}
message ConfirmResponse { bool ready = 1; }

// -------------------------------------------------------------------------
// --- 3. Phase 2: Offer Submission Messages ---
// -------------------------------------------------------------------------

message OfferSubmissionResponse {
  bool   accepted = 1; // True if W=2
  string message  = 2;
  bool   termino  = 3;
}

// -------------------------------------------------------------------------
// --- 4. Phase 3 & 4: DB Node and Consumer Communication Messages ---
// -------------------------------------------------------------------------

message StoreOfferResponse {
  bool   success = 1;
  string message = 2;
}

message ConsumerResponse {
  bool   success = 1;
  string message = 2;
}

message RecoveryRequest { string requesting_node_id = 1; }
message RecoveryResponse { repeated Offer offers = 1; }

// -------------------------------------------------------------------------
// --- 5. Finalización ---
// -------------------------------------------------------------------------

message EndingNotify { bool fin = 1; }
message EndingConfirm {
  bool bdconfirm       = 1;
  bool consumerconfirm = 2;
}

// -------------------------------------------------------------------------
// --- 6. gRPC Services ---
// -------------------------------------------------------------------------

service EntityManagement {
  rpc RegisterEntity (RegistrationRequest) returns (RegistrationResponse);
}

service ConfirmarInicio {
  rpc Confirmacion (ConfirmRequest) returns (ConfirmResponse);
}

service OfferSubmission {
  rpc SendOffer (Offer) returns (OfferSubmissionResponse);
}

service DBNode {
  rpc StoreOffer      (Offer)            returns (StoreOfferResponse);
  rpc GetOfferHistory (RecoveryRequest)  returns (RecoveryResponse);
}

service Consumer {
  rpc ReceiveOffer    (Offer)            returns (ConsumerResponse);
}

// Broker-side history for consumers (R=2 consensus + filtering)
message HistoryRequest { string consumer_id = 1; }
message HistoryResponse { repeated Offer offers = 1; }

service Recovery {
  rpc GetFilteredHistory (HistoryRequest) returns (HistoryResponse);
}

// Finalización notification (Broker -> DBs/Consumers)
service Finalizacion {
  rpc InformarFinalizacion (EndingNotify) returns (EndingConfirm);
}
