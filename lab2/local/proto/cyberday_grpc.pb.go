// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/cyberday.proto

package cyberday

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityManagement_RegisterEntity_FullMethodName = "/cyberday.EntityManagement/RegisterEntity"
)

// EntityManagementClient is the client API for EntityManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for all entities to register with the Broker (Fase 1)
type EntityManagementClient interface {
	RegisterEntity(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
}

type entityManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityManagementClient(cc grpc.ClientConnInterface) EntityManagementClient {
	return &entityManagementClient{cc}
}

func (c *entityManagementClient) RegisterEntity(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, EntityManagement_RegisterEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityManagementServer is the server API for EntityManagement service.
// All implementations must embed UnimplementedEntityManagementServer
// for forward compatibility.
//
// Service for all entities to register with the Broker (Fase 1)
type EntityManagementServer interface {
	RegisterEntity(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	mustEmbedUnimplementedEntityManagementServer()
}

// UnimplementedEntityManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityManagementServer struct{}

func (UnimplementedEntityManagementServer) RegisterEntity(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEntity not implemented")
}
func (UnimplementedEntityManagementServer) mustEmbedUnimplementedEntityManagementServer() {}
func (UnimplementedEntityManagementServer) testEmbeddedByValue()                          {}

// UnsafeEntityManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityManagementServer will
// result in compilation errors.
type UnsafeEntityManagementServer interface {
	mustEmbedUnimplementedEntityManagementServer()
}

func RegisterEntityManagementServer(s grpc.ServiceRegistrar, srv EntityManagementServer) {
	// If the following call pancis, it indicates UnimplementedEntityManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityManagement_ServiceDesc, srv)
}

func _EntityManagement_RegisterEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagementServer).RegisterEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManagement_RegisterEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagementServer).RegisterEntity(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityManagement_ServiceDesc is the grpc.ServiceDesc for EntityManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyberday.EntityManagement",
	HandlerType: (*EntityManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEntity",
			Handler:    _EntityManagement_RegisterEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberday.proto",
}

const (
	ConfirmarInicio_Confirmacion_FullMethodName = "/cyberday.ConfirmarInicio/Confirmacion"
)

// ConfirmarInicioClient is the client API for ConfirmarInicio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service para que los Productores confirmen el inicio
type ConfirmarInicioClient interface {
	Confirmacion(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error)
}

type confirmarInicioClient struct {
	cc grpc.ClientConnInterface
}

func NewConfirmarInicioClient(cc grpc.ClientConnInterface) ConfirmarInicioClient {
	return &confirmarInicioClient{cc}
}

func (c *confirmarInicioClient) Confirmacion(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, ConfirmarInicio_Confirmacion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfirmarInicioServer is the server API for ConfirmarInicio service.
// All implementations must embed UnimplementedConfirmarInicioServer
// for forward compatibility.
//
// Service para que los Productores confirmen el inicio
type ConfirmarInicioServer interface {
	Confirmacion(context.Context, *ConfirmRequest) (*ConfirmResponse, error)
	mustEmbedUnimplementedConfirmarInicioServer()
}

// UnimplementedConfirmarInicioServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfirmarInicioServer struct{}

func (UnimplementedConfirmarInicioServer) Confirmacion(context.Context, *ConfirmRequest) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirmacion not implemented")
}
func (UnimplementedConfirmarInicioServer) mustEmbedUnimplementedConfirmarInicioServer() {}
func (UnimplementedConfirmarInicioServer) testEmbeddedByValue()                         {}

// UnsafeConfirmarInicioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfirmarInicioServer will
// result in compilation errors.
type UnsafeConfirmarInicioServer interface {
	mustEmbedUnimplementedConfirmarInicioServer()
}

func RegisterConfirmarInicioServer(s grpc.ServiceRegistrar, srv ConfirmarInicioServer) {
	// If the following call pancis, it indicates UnimplementedConfirmarInicioServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfirmarInicio_ServiceDesc, srv)
}

func _ConfirmarInicio_Confirmacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmarInicioServer).Confirmacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfirmarInicio_Confirmacion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmarInicioServer).Confirmacion(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfirmarInicio_ServiceDesc is the grpc.ServiceDesc for ConfirmarInicio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfirmarInicio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyberday.ConfirmarInicio",
	HandlerType: (*ConfirmarInicioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Confirmacion",
			Handler:    _ConfirmarInicio_Confirmacion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberday.proto",
}

const (
	OfferSubmission_SendOffer_FullMethodName = "/cyberday.OfferSubmission/SendOffer"
)

// OfferSubmissionClient is the client API for OfferSubmission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for Producers to send offers to the Broker (Fase 2)
type OfferSubmissionClient interface {
	SendOffer(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*OfferSubmissionResponse, error)
}

type offerSubmissionClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferSubmissionClient(cc grpc.ClientConnInterface) OfferSubmissionClient {
	return &offerSubmissionClient{cc}
}

func (c *offerSubmissionClient) SendOffer(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*OfferSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferSubmissionResponse)
	err := c.cc.Invoke(ctx, OfferSubmission_SendOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferSubmissionServer is the server API for OfferSubmission service.
// All implementations must embed UnimplementedOfferSubmissionServer
// for forward compatibility.
//
// Service for Producers to send offers to the Broker (Fase 2)
type OfferSubmissionServer interface {
	SendOffer(context.Context, *Offer) (*OfferSubmissionResponse, error)
	mustEmbedUnimplementedOfferSubmissionServer()
}

// UnimplementedOfferSubmissionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfferSubmissionServer struct{}

func (UnimplementedOfferSubmissionServer) SendOffer(context.Context, *Offer) (*OfferSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffer not implemented")
}
func (UnimplementedOfferSubmissionServer) mustEmbedUnimplementedOfferSubmissionServer() {}
func (UnimplementedOfferSubmissionServer) testEmbeddedByValue()                         {}

// UnsafeOfferSubmissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferSubmissionServer will
// result in compilation errors.
type UnsafeOfferSubmissionServer interface {
	mustEmbedUnimplementedOfferSubmissionServer()
}

func RegisterOfferSubmissionServer(s grpc.ServiceRegistrar, srv OfferSubmissionServer) {
	// If the following call pancis, it indicates UnimplementedOfferSubmissionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OfferSubmission_ServiceDesc, srv)
}

func _OfferSubmission_SendOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferSubmissionServer).SendOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferSubmission_SendOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferSubmissionServer).SendOffer(ctx, req.(*Offer))
	}
	return interceptor(ctx, in, info, handler)
}

// OfferSubmission_ServiceDesc is the grpc.ServiceDesc for OfferSubmission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfferSubmission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyberday.OfferSubmission",
	HandlerType: (*OfferSubmissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOffer",
			Handler:    _OfferSubmission_SendOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberday.proto",
}

const (
	DBNode_StoreOffer_FullMethodName      = "/cyberday.DBNode/StoreOffer"
	DBNode_GetOfferHistory_FullMethodName = "/cyberday.DBNode/GetOfferHistory"
)

// DBNodeClient is the client API for DBNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for the Broker to write data to the DB Nodes and manage recovery (Fase 3)
type DBNodeClient interface {
	StoreOffer(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*StoreOfferResponse, error)
	GetOfferHistory(ctx context.Context, in *RecoveryRequest, opts ...grpc.CallOption) (*RecoveryResponse, error)
}

type dBNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDBNodeClient(cc grpc.ClientConnInterface) DBNodeClient {
	return &dBNodeClient{cc}
}

func (c *dBNodeClient) StoreOffer(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*StoreOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreOfferResponse)
	err := c.cc.Invoke(ctx, DBNode_StoreOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBNodeClient) GetOfferHistory(ctx context.Context, in *RecoveryRequest, opts ...grpc.CallOption) (*RecoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoveryResponse)
	err := c.cc.Invoke(ctx, DBNode_GetOfferHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBNodeServer is the server API for DBNode service.
// All implementations must embed UnimplementedDBNodeServer
// for forward compatibility.
//
// Service for the Broker to write data to the DB Nodes and manage recovery (Fase 3)
type DBNodeServer interface {
	StoreOffer(context.Context, *Offer) (*StoreOfferResponse, error)
	GetOfferHistory(context.Context, *RecoveryRequest) (*RecoveryResponse, error)
	mustEmbedUnimplementedDBNodeServer()
}

// UnimplementedDBNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBNodeServer struct{}

func (UnimplementedDBNodeServer) StoreOffer(context.Context, *Offer) (*StoreOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreOffer not implemented")
}
func (UnimplementedDBNodeServer) GetOfferHistory(context.Context, *RecoveryRequest) (*RecoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferHistory not implemented")
}
func (UnimplementedDBNodeServer) mustEmbedUnimplementedDBNodeServer() {}
func (UnimplementedDBNodeServer) testEmbeddedByValue()                {}

// UnsafeDBNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBNodeServer will
// result in compilation errors.
type UnsafeDBNodeServer interface {
	mustEmbedUnimplementedDBNodeServer()
}

func RegisterDBNodeServer(s grpc.ServiceRegistrar, srv DBNodeServer) {
	// If the following call pancis, it indicates UnimplementedDBNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBNode_ServiceDesc, srv)
}

func _DBNode_StoreOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServer).StoreOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBNode_StoreOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServer).StoreOffer(ctx, req.(*Offer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBNode_GetOfferHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServer).GetOfferHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBNode_GetOfferHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServer).GetOfferHistory(ctx, req.(*RecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBNode_ServiceDesc is the grpc.ServiceDesc for DBNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyberday.DBNode",
	HandlerType: (*DBNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreOffer",
			Handler:    _DBNode_StoreOffer_Handler,
		},
		{
			MethodName: "GetOfferHistory",
			Handler:    _DBNode_GetOfferHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberday.proto",
}

const (
	Consumer_ReceiveOffer_FullMethodName = "/cyberday.Consumer/ReceiveOffer"
)

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NUEVO: Service for the Broker to notify Consumers (Fase 4)
type ConsumerClient interface {
	ReceiveOffer(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*ConsumerResponse, error)
}

type consumerClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerClient(cc grpc.ClientConnInterface) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) ReceiveOffer(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*ConsumerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumerResponse)
	err := c.cc.Invoke(ctx, Consumer_ReceiveOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServer is the server API for Consumer service.
// All implementations must embed UnimplementedConsumerServer
// for forward compatibility.
//
// NUEVO: Service for the Broker to notify Consumers (Fase 4)
type ConsumerServer interface {
	ReceiveOffer(context.Context, *Offer) (*ConsumerResponse, error)
	mustEmbedUnimplementedConsumerServer()
}

// UnimplementedConsumerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsumerServer struct{}

func (UnimplementedConsumerServer) ReceiveOffer(context.Context, *Offer) (*ConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveOffer not implemented")
}
func (UnimplementedConsumerServer) mustEmbedUnimplementedConsumerServer() {}
func (UnimplementedConsumerServer) testEmbeddedByValue()                  {}

// UnsafeConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServer will
// result in compilation errors.
type UnsafeConsumerServer interface {
	mustEmbedUnimplementedConsumerServer()
}

func RegisterConsumerServer(s grpc.ServiceRegistrar, srv ConsumerServer) {
	// If the following call pancis, it indicates UnimplementedConsumerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Consumer_ServiceDesc, srv)
}

func _Consumer_ReceiveOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).ReceiveOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consumer_ReceiveOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).ReceiveOffer(ctx, req.(*Offer))
	}
	return interceptor(ctx, in, info, handler)
}

// Consumer_ServiceDesc is the grpc.ServiceDesc for Consumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyberday.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveOffer",
			Handler:    _Consumer_ReceiveOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberday.proto",
}

const (
	DBControl_SimulateFailure_FullMethodName = "/cyberday.DBControl/SimulateFailure"
)

// DBControlClient is the client API for DBControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NUEVO: Service for the Broker to control the DB Nodes (Fase 5)
type DBControlClient interface {
	SimulateFailure(ctx context.Context, in *FailureRequest, opts ...grpc.CallOption) (*FailureResponse, error)
}

type dBControlClient struct {
	cc grpc.ClientConnInterface
}

func NewDBControlClient(cc grpc.ClientConnInterface) DBControlClient {
	return &dBControlClient{cc}
}

func (c *dBControlClient) SimulateFailure(ctx context.Context, in *FailureRequest, opts ...grpc.CallOption) (*FailureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailureResponse)
	err := c.cc.Invoke(ctx, DBControl_SimulateFailure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBControlServer is the server API for DBControl service.
// All implementations must embed UnimplementedDBControlServer
// for forward compatibility.
//
// NUEVO: Service for the Broker to control the DB Nodes (Fase 5)
type DBControlServer interface {
	SimulateFailure(context.Context, *FailureRequest) (*FailureResponse, error)
	mustEmbedUnimplementedDBControlServer()
}

// UnimplementedDBControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBControlServer struct{}

func (UnimplementedDBControlServer) SimulateFailure(context.Context, *FailureRequest) (*FailureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateFailure not implemented")
}
func (UnimplementedDBControlServer) mustEmbedUnimplementedDBControlServer() {}
func (UnimplementedDBControlServer) testEmbeddedByValue()                   {}

// UnsafeDBControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBControlServer will
// result in compilation errors.
type UnsafeDBControlServer interface {
	mustEmbedUnimplementedDBControlServer()
}

func RegisterDBControlServer(s grpc.ServiceRegistrar, srv DBControlServer) {
	// If the following call pancis, it indicates UnimplementedDBControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBControl_ServiceDesc, srv)
}

func _DBControl_SimulateFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBControlServer).SimulateFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBControl_SimulateFailure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBControlServer).SimulateFailure(ctx, req.(*FailureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBControl_ServiceDesc is the grpc.ServiceDesc for DBControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyberday.DBControl",
	HandlerType: (*DBControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimulateFailure",
			Handler:    _DBControl_SimulateFailure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberday.proto",
}
