// proto/cyberday.proto
syntax = "proto3";

option go_package = "./;cyberday";

package cyberday;

service RegistroEntidades {
  rpc RegistrarEntidad (SolicitudRegistro) returns (RespuestaRegistro); // Funcion para registrar cualquier tipo de entidad
}

// Solicitud de registro que incluye ID, Tipo y Direccion de la entidad
message SolicitudRegistro {
  string id_entidad = 1;
  string tipo_entidad = 2;
  string direccion = 3;
}

// Resultado del registro
message RespuestaRegistro {
  bool   exito = 1;
  string mensaje = 2;
}

service ConfirmarInicio {
  rpc Confirmacion (SolicitudInicio) returns (RespuestaInicio); // Solicitud de confirmar el inicio del cyberday para que tiendas sepan si pueden empezar a enviar ofertas
}

message SolicitudInicio {} // Solicitud vacia

message RespuestaInicio { bool listo = 1; } // Respuesta del broker

service Ofertas {
  rpc EnviarOferta (Oferta) returns (RespuestaOferta); // Funcion para enviar ofertas desde tiendas a broker
}

service NodoDB {
  rpc AlmacenarOferta      (Oferta)            returns (RespuestaAlmacenarOferta); // Funcion para almacenar ofertas en las BDs
  rpc GetHistorialOfertas (SolicitudHistorialBD)  returns (RespuestaHistorialBD); // Funcion para solicitar el historial de ofertas de las BDs
}

service Consumer {
  rpc RecibirOferta    (Oferta)            returns (RespuestaConsumidor); // Funcion para enviar ofertas a los consumidores
}

// Mensaje de oferta que incluye todos los atributos necesarios
message Oferta {
  string oferta_id = 1;
  string tienda = 2;
  string categoria = 3;
  string producto = 4;
  int64  precio = 5;
  int32  stock = 6;
  string fecha = 7;
  float  descuento = 8;
}

// Mensaje que indica si la oferta se escribio exitosamente y tambien un indicador de si el broker sigue recibiendo ofertas
message RespuestaOferta {
  bool   aceptado = 1; // True if W=2
  string mensaje  = 2;
  bool   termino  = 3;
}

// Mensaje que indica si una BD almacena correctamente una oferta
message RespuestaAlmacenarOferta {
  bool   exito = 1;
  string mensaje = 2;
}

// Mensaje que solicita una resincronizacion incluyendo el id de la entidad
message SolicitudHistorialBD { string id_nodo = 1; }

// Mensaje que incluye el historial de ofertas
message RespuestaHistorialBD { repeated Oferta Ofertas = 1; }

// Mensaje que indica si un consumidor recibio exitosamente una oferta
message RespuestaConsumidor {
  bool   exito = 1;
  string mensaje = 2;
}

service Finalizacion {
  rpc InformarFinalizacion (NotificarFin) returns (ConfirmacionFin); // Funcion que informa el fin del cyberday a los consumidores y dbs
}

// Mensaje que notifica si es momento de terminar y forzar que no hayan mas caidas
message NotificarFin { bool fin = 1; }

// Confirmaciones finalizacion por parte de BDs y Consumidores
message ConfirmacionFin {
  bool confirmacionbd       = 1;
  bool confirmacionconsumidor = 2;
}

service Recovery {
  rpc GetHistorialFiltrado (SolicitudHistorialConsumer) returns (RespuestaHistorialConsumer); // Funcion que solicita el historial de ofertas segun preferencias
}

// Mensaje que envia el consumidor para solicitar el historico
message SolicitudHistorialConsumer { string id_consumidor = 1; }

// Mensaje que incluye el historico filtrado
message RespuestaHistorialConsumer { repeated Oferta Ofertas = 1; }

service Caida {
  rpc InformarCaida (FailNotify) returns (FailACK); // Funcion que informa caida de una entidad al broker, para que este mantenga un registro
}

// Mensaje que incluye el id y tipo de entidad que reporta la caida
message FailNotify {
  string id = 1;
  string tipo = 2;
}

// Mensaje de acknowledgment sobre la caida
message FailACK {
  bool ack = 1;
}