// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/atraco.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Oferta_EntregarOferta_FullMethodName = "/Oferta/EntregarOferta"
)

// OfertaClient is the client API for Oferta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio que manejaran entre Michael y Lester
type OfertaClient interface {
	// Funcion remota 1: recibe una solicitud de oferta y devuelve una oferta disponible
	EntregarOferta(ctx context.Context, in *SolicitudOferta, opts ...grpc.CallOption) (*OfertaDisponible, error)
}

type ofertaClient struct {
	cc grpc.ClientConnInterface
}

func NewOfertaClient(cc grpc.ClientConnInterface) OfertaClient {
	return &ofertaClient{cc}
}

func (c *ofertaClient) EntregarOferta(ctx context.Context, in *SolicitudOferta, opts ...grpc.CallOption) (*OfertaDisponible, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfertaDisponible)
	err := c.cc.Invoke(ctx, Oferta_EntregarOferta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfertaServer is the server API for Oferta service.
// All implementations must embed UnimplementedOfertaServer
// for forward compatibility.
//
// Servicio que manejaran entre Michael y Lester
type OfertaServer interface {
	// Funcion remota 1: recibe una solicitud de oferta y devuelve una oferta disponible
	EntregarOferta(context.Context, *SolicitudOferta) (*OfertaDisponible, error)
	mustEmbedUnimplementedOfertaServer()
}

// UnimplementedOfertaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfertaServer struct{}

func (UnimplementedOfertaServer) EntregarOferta(context.Context, *SolicitudOferta) (*OfertaDisponible, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntregarOferta not implemented")
}
func (UnimplementedOfertaServer) mustEmbedUnimplementedOfertaServer() {}
func (UnimplementedOfertaServer) testEmbeddedByValue()                {}

// UnsafeOfertaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfertaServer will
// result in compilation errors.
type UnsafeOfertaServer interface {
	mustEmbedUnimplementedOfertaServer()
}

func RegisterOfertaServer(s grpc.ServiceRegistrar, srv OfertaServer) {
	// If the following call pancis, it indicates UnimplementedOfertaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Oferta_ServiceDesc, srv)
}

func _Oferta_EntregarOferta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudOferta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfertaServer).EntregarOferta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oferta_EntregarOferta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfertaServer).EntregarOferta(ctx, req.(*SolicitudOferta))
	}
	return interceptor(ctx, in, info, handler)
}

// Oferta_ServiceDesc is the grpc.ServiceDesc for Oferta service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oferta_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Oferta",
	HandlerType: (*OfertaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EntregarOferta",
			Handler:    _Oferta_EntregarOferta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/atraco.proto",
}

const (
	SegundaFase_InformarEstadoSegundaFase_FullMethodName = "/SegundaFase/InformarEstadoSegundaFase"
)

// SegundaFaseClient is the client API for SegundaFase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio que manejara Michael con Franklin o Trevor (segun quien se escoja para la fase 2)
type SegundaFaseClient interface {
	// FUncion remota 1: recibe un informe de trabajo y devuelve el resultado de la mision
	InformarEstadoSegundaFase(ctx context.Context, in *InformarTrabajo, opts ...grpc.CallOption) (*Resultado, error)
}

type segundaFaseClient struct {
	cc grpc.ClientConnInterface
}

func NewSegundaFaseClient(cc grpc.ClientConnInterface) SegundaFaseClient {
	return &segundaFaseClient{cc}
}

func (c *segundaFaseClient) InformarEstadoSegundaFase(ctx context.Context, in *InformarTrabajo, opts ...grpc.CallOption) (*Resultado, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resultado)
	err := c.cc.Invoke(ctx, SegundaFase_InformarEstadoSegundaFase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegundaFaseServer is the server API for SegundaFase service.
// All implementations must embed UnimplementedSegundaFaseServer
// for forward compatibility.
//
// Servicio que manejara Michael con Franklin o Trevor (segun quien se escoja para la fase 2)
type SegundaFaseServer interface {
	// FUncion remota 1: recibe un informe de trabajo y devuelve el resultado de la mision
	InformarEstadoSegundaFase(context.Context, *InformarTrabajo) (*Resultado, error)
	mustEmbedUnimplementedSegundaFaseServer()
}

// UnimplementedSegundaFaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSegundaFaseServer struct{}

func (UnimplementedSegundaFaseServer) InformarEstadoSegundaFase(context.Context, *InformarTrabajo) (*Resultado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarEstadoSegundaFase not implemented")
}
func (UnimplementedSegundaFaseServer) mustEmbedUnimplementedSegundaFaseServer() {}
func (UnimplementedSegundaFaseServer) testEmbeddedByValue()                     {}

// UnsafeSegundaFaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegundaFaseServer will
// result in compilation errors.
type UnsafeSegundaFaseServer interface {
	mustEmbedUnimplementedSegundaFaseServer()
}

func RegisterSegundaFaseServer(s grpc.ServiceRegistrar, srv SegundaFaseServer) {
	// If the following call pancis, it indicates UnimplementedSegundaFaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SegundaFase_ServiceDesc, srv)
}

func _SegundaFase_InformarEstadoSegundaFase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformarTrabajo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegundaFaseServer).InformarEstadoSegundaFase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SegundaFase_InformarEstadoSegundaFase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegundaFaseServer).InformarEstadoSegundaFase(ctx, req.(*InformarTrabajo))
	}
	return interceptor(ctx, in, info, handler)
}

// SegundaFase_ServiceDesc is the grpc.ServiceDesc for SegundaFase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SegundaFase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SegundaFase",
	HandlerType: (*SegundaFaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformarEstadoSegundaFase",
			Handler:    _SegundaFase_InformarEstadoSegundaFase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/atraco.proto",
}
